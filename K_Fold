{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8820615,"sourceType":"datasetVersion","datasetId":5306477},{"sourceId":8820716,"sourceType":"datasetVersion","datasetId":5306543},{"sourceId":8820948,"sourceType":"datasetVersion","datasetId":5306628}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install ultralytics","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-08T06:47:21.772545Z","iopub.execute_input":"2024-07-08T06:47:21.773265Z","iopub.status.idle":"2024-07-08T06:47:36.731611Z","shell.execute_reply.started":"2024-07-08T06:47:21.773233Z","shell.execute_reply":"2024-07-08T06:47:36.730603Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting ultralytics\n  Downloading ultralytics-8.2.50-py3-none-any.whl.metadata (41 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.2/41.2 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hRequirement already satisfied: numpy<2.0.0,>=1.23.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (1.26.4)\nRequirement already satisfied: matplotlib>=3.3.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (3.7.5)\nRequirement already satisfied: opencv-python>=4.6.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (4.10.0.82)\nRequirement already satisfied: pillow>=7.1.2 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (9.5.0)\nRequirement already satisfied: pyyaml>=5.3.1 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (6.0.1)\nRequirement already satisfied: requests>=2.23.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (2.32.3)\nRequirement already satisfied: scipy>=1.4.1 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (1.11.4)\nRequirement already satisfied: torch>=1.8.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (2.1.2)\nRequirement already satisfied: torchvision>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (0.16.2)\nRequirement already satisfied: tqdm>=4.64.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (4.66.4)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from ultralytics) (5.9.3)\nRequirement already satisfied: py-cpuinfo in /opt/conda/lib/python3.10/site-packages (from ultralytics) (9.0.0)\nRequirement already satisfied: pandas>=1.1.4 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (2.2.1)\nRequirement already satisfied: seaborn>=0.11.0 in /opt/conda/lib/python3.10/site-packages (from ultralytics) (0.12.2)\nCollecting ultralytics-thop>=2.0.0 (from ultralytics)\n  Downloading ultralytics_thop-2.0.0-py3-none-any.whl.metadata (8.5 kB)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (21.3)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib>=3.3.0->ultralytics) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.1.4->ultralytics) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.1.4->ultralytics) (2023.4)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.23.0->ultralytics) (2024.2.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (1.12.1)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.8.0->ultralytics) (2024.3.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib>=3.3.0->ultralytics) (1.16.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.8.0->ultralytics) (2.1.3)\nRequirement already satisfied: mpmath<1.4.0,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.8.0->ultralytics) (1.3.0)\nDownloading ultralytics-8.2.50-py3-none-any.whl (799 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m799.4/799.4 kB\u001b[0m \u001b[31m18.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading ultralytics_thop-2.0.0-py3-none-any.whl (25 kB)\nInstalling collected packages: ultralytics-thop, ultralytics\nSuccessfully installed ultralytics-8.2.50 ultralytics-thop-2.0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nfrom ultralytics import YOLO\n","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:36.733723Z","iopub.execute_input":"2024-07-08T06:47:36.734050Z","iopub.status.idle":"2024-07-08T06:47:41.780071Z","shell.execute_reply.started":"2024-07-08T06:47:36.734024Z","shell.execute_reply":"2024-07-08T06:47:41.779080Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"## Configuración de la ruta de los datos","metadata":{"execution":{"iopub.status.busy":"2024-06-29T23:27:07.219068Z","iopub.execute_input":"2024-06-29T23:27:07.219497Z","iopub.status.idle":"2024-06-29T23:27:07.223985Z","shell.execute_reply.started":"2024-06-29T23:27:07.219465Z","shell.execute_reply":"2024-06-29T23:27:07.222988Z"}}},{"cell_type":"code","source":"\npath_images = '/kaggle/input/to-train-crosswalks/to_train/images'\npath_labels = '/kaggle/input/to-train-crosswalks/to_train/labels'\npath_test_images = '/kaggle/input/test-crosswalk/test/images'\npath_test_labels = '/kaggle/input/test-crosswalk/test/labels'","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:41.781337Z","iopub.execute_input":"2024-07-08T06:47:41.781854Z","iopub.status.idle":"2024-07-08T06:47:41.786838Z","shell.execute_reply.started":"2024-07-08T06:47:41.781822Z","shell.execute_reply":"2024-07-08T06:47:41.785688Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import os\nimport shutil\nimport pandas as pd\n\npath_working_test='/kaggle/working/test_folder'\n\npath_working_test_images = f'{path_working_test}/test_images'\npath_working_test_labels = f'{path_working_test}/test_labels'\n\n# Crear directorios de trabajo para las imágenes y etiquetas de prueba\nos.makedirs(path_working_test_images, exist_ok=True)\nos.makedirs(path_working_test_labels, exist_ok=True)\n\n# Copiar las imágenes de prueba al directorio de trabajo\nfor image_name in os.listdir(path_test_images):\n    shutil.copy(os.path.join(path_test_images, image_name), os.path.join(path_working_test_images, image_name))\n\n# Copiar las etiquetas de prueba al directorio de trabajo\nfor label_name in os.listdir(path_test_labels):\n    shutil.copy(os.path.join(path_test_labels, label_name), os.path.join(path_working_test_labels, label_name))\n\n# Verificar y completar etiquetas de prueba\ntest_images = os.listdir(path_working_test_images)\n\nfor image_name in test_images:\n    base_name = image_name[:-4]\n    label_name = base_name + '.txt'\n    label_path = os.path.join(path_working_test_labels, label_name)\n\n    if not os.path.exists(label_path):\n        with open(label_path, 'w') as f:\n            pass\n        print(f\"Se ha creado un archivo de etiqueta vacío para {image_name}\")\n\n# Crear DataFrames para los datos de entrenamiento y prueba\ndata = pd.DataFrame({'image': os.listdir(path_images), 'label': os.listdir(path_labels)})\ntest_data = pd.DataFrame({'image': os.listdir(path_working_test_images), 'label': os.listdir(path_working_test_labels)})\n\n# Imprimir DataFrames para verificar\nprint(\"Datos de entrenamiento:\")\nprint(data)\nprint(\"\\nDatos de prueba:\")\nprint(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:41.789012Z","iopub.execute_input":"2024-07-08T06:47:41.789339Z","iopub.status.idle":"2024-07-08T06:47:43.869779Z","shell.execute_reply.started":"2024-07-08T06:47:41.789313Z","shell.execute_reply":"2024-07-08T06:47:43.868810Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Se ha creado un archivo de etiqueta vacío para Strisce--107-_jpg.rf.17c8ef02eb84b49a728055218dceaa40(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--118-_jpg.rf.54995eb9bae14606e4cddbc834e8ce37(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--105-_jpg.rf.e2fce3b37caa1e8452748ffbadde64df(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--105-_jpg.rf.16ab0e51e3a52d6520b0c449d2a8b56b(1).jpg\nSe ha creado un archivo de etiqueta vacío para Strisce--113-_jpg.rf.1fcdddf1cf3d22ab22bf5b31bdd62a1e(1).jpg\nDatos de entrenamiento:\n                                                  image  \\\n0     Strisce--140-_jpg.rf.86b57352fd2545f88a9c7d0df...   \n1     Strisce--129-_jpg.rf.f1e7a3e79bcee39763e9c18a8...   \n2     Strisce--109-_jpg.rf.35da873c2eeb6715c4d385cde...   \n3     Strisce--345-_jpg.rf.328518dd4dd55a900d1dac183...   \n4     Strisce--1-_jpg.rf.b3959ddb964e8243a89487bddc7...   \n...                                                 ...   \n1289  Strisce--486-_jpg.rf.bd3e3f782f6913de766d60710...   \n1290  Strisce--322-_jpg.rf.3e17720ebb71b10c9460bb6f8...   \n1291  Strisce--355-_jpg.rf.459dc27a619f49e7f0f0ae8e6...   \n1292  Strisce--308-_jpg.rf.a3e7da8bac8305edb9976d533...   \n1293  Strisce--135-_jpg.rf.40613cbe563fd8608210b851d...   \n\n                                                  label  \n0     Strisce--148-_jpg.rf.9df8e6c53b9ce5489e715e08c...  \n1     Strisce--240-_jpg.rf.7fe7de74e9433bf260f4d8885...  \n2     Strisce--388-_jpg.rf.a8a6cd9c8375b77794b45ed7a...  \n3     Strisce--93-_jpg.rf.c0f23f6044ad5d19e34fc2edac...  \n4     Strisce--82-_jpg.rf.396f42e56c81ec9c0cdc0523ac...  \n...                                                 ...  \n1289  Strisce--199-_jpg.rf.6264ff9f2c73b58c6dfb8fb02...  \n1290  Strisce--43-_jpg.rf.a814ae4c8fc012230a1ab73343...  \n1291  Strisce--323-_jpg.rf.de4baf0340177b70fd57157bc...  \n1292  Strisce--98-_jpg.rf.c8db82d211e0c31eb1c9b5c0fb...  \n1293  Strisce--184-_jpg.rf.367282a9d12afc5836786c907...  \n\n[1294 rows x 2 columns]\n\nDatos de prueba:\n                                                 image  \\\n0    Strisce--428-_jpg.rf.f541fd1caf8bf17b3141db765...   \n1    Strisce--337-_jpg.rf.be29aad8c103964907aaaf85b...   \n2    Strisce--321-_jpg.rf.544f45f2284eac3a4eb38416a...   \n3    Strisce--247-_jpg.rf.cc274c90a7180fbb2b5b68225...   \n4    Strisce--177-_jpg.rf.64c6a4883a86ac59b2a0ae5fc...   \n..                                                 ...   \n224  Strisce--355-_jpg.rf.d4eb448371a2988dab48da5b7...   \n225  Strisce--417-_jpg.rf.6e25716e82e9c3d814f993f23...   \n226  Strisce--379-_jpg.rf.abf9d6cb9dfb44d147c4b998b...   \n227  Strisce--379-_jpg.rf.91d3c4f0414c253e352632989...   \n228  Strisce--40-_jpg.rf.63d615c41cc990ffede23695d9...   \n\n                                                 label  \n0    Strisce--6-_jpg.rf.2ef258519c793bfa685db128e50...  \n1    Strisce--20-_jpg.rf.7992945d7f678a8586b49bd13e...  \n2    Strisce--336-_jpg.rf.3b7fd0f5c35b6a316f905cd05...  \n3    Strisce--43-_jpg.rf.d3e15fa4b938798e44d1bd5edf...  \n4    Strisce--362-_jpg.rf.3bcbae96432dcdc5a3346695c...  \n..                                                 ...  \n224  Strisce--107-_jpg.rf.17c8ef02eb84b49a728055218...  \n225  Strisce--200-_jpg.rf.4d8a14ef8d5fececca1fb2398...  \n226  Strisce--452-_jpg.rf.6238dcb53b3ac5371c3f93057...  \n227  Strisce--466-_jpg.rf.61a04e01571562119bd17d2be...  \n228  Strisce--187-_jpg.rf.578db8c53f28e0e7f38a7c34d...  \n\n[229 rows x 2 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Cargar los datos","metadata":{}},{"cell_type":"code","source":"\nimages = os.listdir(path_images)\nlabels = os.listdir(path_labels)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:43.871134Z","iopub.execute_input":"2024-07-08T06:47:43.871498Z","iopub.status.idle":"2024-07-08T06:47:43.878445Z","shell.execute_reply.started":"2024-07-08T06:47:43.871466Z","shell.execute_reply":"2024-07-08T06:47:43.877673Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"print(f'Cant imag: {len(images)}')\nprint(f'Cant labels: {len(labels)}')","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:43.879499Z","iopub.execute_input":"2024-07-08T06:47:43.879807Z","iopub.status.idle":"2024-07-08T06:47:43.904291Z","shell.execute_reply.started":"2024-07-08T06:47:43.879766Z","shell.execute_reply":"2024-07-08T06:47:43.903337Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Cant imag: 1294\nCant labels: 1294\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Asegurarse de que las imágenes y las etiquetas coinciden","metadata":{}},{"cell_type":"code","source":"val_data=test_data","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:43.905311Z","iopub.execute_input":"2024-07-08T06:47:43.905619Z","iopub.status.idle":"2024-07-08T06:47:43.915276Z","shell.execute_reply.started":"2024-07-08T06:47:43.905596Z","shell.execute_reply":"2024-07-08T06:47:43.914430Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"val_data['image'].head()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:43.916204Z","iopub.execute_input":"2024-07-08T06:47:43.916463Z","iopub.status.idle":"2024-07-08T06:47:43.929319Z","shell.execute_reply.started":"2024-07-08T06:47:43.916442Z","shell.execute_reply":"2024-07-08T06:47:43.928424Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"0    Strisce--428-_jpg.rf.f541fd1caf8bf17b3141db765...\n1    Strisce--337-_jpg.rf.be29aad8c103964907aaaf85b...\n2    Strisce--321-_jpg.rf.544f45f2284eac3a4eb38416a...\n3    Strisce--247-_jpg.rf.cc274c90a7180fbb2b5b68225...\n4    Strisce--177-_jpg.rf.64c6a4883a86ac59b2a0ae5fc...\nName: image, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"import os\nimport shutil\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom ultralytics import YOLO\n#from ultralytics.utils import metrics\n#from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score\nimport matplotlib.pyplot as plt\n\n# Configurar el modelo YOLOv8\nmodel = YOLO('yolov8n.pt')  # Puedes cambiar el modelo base según tus necesidades","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:43.930385Z","iopub.execute_input":"2024-07-08T06:47:43.930687Z","iopub.status.idle":"2024-07-08T06:47:45.760416Z","shell.execute_reply.started":"2024-07-08T06:47:43.930665Z","shell.execute_reply":"2024-07-08T06:47:45.759470Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Downloading https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt to 'yolov8n.pt'...\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 6.25M/6.25M [00:00<00:00, 115MB/s]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Crear Carpeta para guardar los resultados de la validación","metadata":{}},{"cell_type":"code","source":"os.makedirs('/kaggle/working/validation_results', exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:45.763797Z","iopub.execute_input":"2024-07-08T06:47:45.764105Z","iopub.status.idle":"2024-07-08T06:47:45.768473Z","shell.execute_reply.started":"2024-07-08T06:47:45.764079Z","shell.execute_reply":"2024-07-08T06:47:45.767489Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"\n# Función para evaluar el modelo\ndef evaluate_model(model,experiment_name:str):\n    yaml_content = \"\"\"\n                   \n\n                    train: /kaggle/working/\n                    val: /kaggle/working/test_folder/test_images\n\n\n                    nc: 1\n\n                    names:\n                         - crosswalk\n                    \"\"\"\n\n    # Guardar el archivo\n    with open('/kaggle/working/crosswalk_test.yaml', 'w') as file:\n        file.write(yaml_content)\n\n    print(\"Archivo .yaml creado con éxito.\")\n    \n   \n    predictions= model.val(data='/kaggle/working/crosswalk_test.yaml',project=f'/kaggle/working/validation_results', name=f'experiment{experiment_name}',save_json=True)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:45.769697Z","iopub.execute_input":"2024-07-08T06:47:45.770033Z","iopub.status.idle":"2024-07-08T06:47:45.779662Z","shell.execute_reply.started":"2024-07-08T06:47:45.770009Z","shell.execute_reply":"2024-07-08T06:47:45.778798Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"\n# Directorio para guardar las métricas\nmetrics_dir = '/kaggle/working/metrics'\nos.makedirs(metrics_dir, exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:45.781009Z","iopub.execute_input":"2024-07-08T06:47:45.781361Z","iopub.status.idle":"2024-07-08T06:47:45.790282Z","shell.execute_reply.started":"2024-07-08T06:47:45.781323Z","shell.execute_reply":"2024-07-08T06:47:45.789465Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"\n# Parámetros para la condición de parada\nn_experiments = 5\nmax_epochs = 150  # Número máximo de epochs para el entrenamiento\npatience = 10  # Número de epochs a esperar si no hay mejora en la precisión","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:45.791499Z","iopub.execute_input":"2024-07-08T06:47:45.791963Z","iopub.status.idle":"2024-07-08T06:47:45.799678Z","shell.execute_reply.started":"2024-07-08T06:47:45.791932Z","shell.execute_reply":"2024-07-08T06:47:45.798778Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"## Crear Carpeta para guardar los modelos finales","metadata":{}},{"cell_type":"code","source":"save_weights_dir='/kaggle/working/save_weights'\nos.makedirs('/kaggle/working/save_weights', exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:45.800664Z","iopub.execute_input":"2024-07-08T06:47:45.800973Z","iopub.status.idle":"2024-07-08T06:47:45.810084Z","shell.execute_reply.started":"2024-07-08T06:47:45.800951Z","shell.execute_reply":"2024-07-08T06:47:45.809267Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"import os\nos.environ['WANDB_DISABLED'] = 'true'","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:45.811145Z","iopub.execute_input":"2024-07-08T06:47:45.811397Z","iopub.status.idle":"2024-07-08T06:47:45.821338Z","shell.execute_reply.started":"2024-07-08T06:47:45.811376Z","shell.execute_reply":"2024-07-08T06:47:45.820219Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"\n\n    \nall_experiment_metrics = []\n\n\nfor experiment in range(n_experiments):\n    \n    print(f\"Experimento {experiment + 1}\")\n    \n    # Dividir los datos en train y validation\n    train_data, val_data = train_test_split(data, test_size=0.2, random_state=42)\n    \n    # Crear directorio para el experimento \n    experiment_dir=os.path.join('/kaggle/working',f'experiment_{experiment+1}')\n    os.makedirs(experiment_dir,exist_ok=True)\n    \n    # Crear directorios para train y validation\n    train_dir = os.path.join(experiment_dir, f'train_data_{experiment + 1}')\n    val_dir = os.path.join(experiment_dir, f'val_data_{experiment + 1}')\n    os.makedirs(train_dir, exist_ok=True)\n    os.makedirs(val_dir, exist_ok=True)\n    \n    # Crear directorios para imágenes y etiquetas dentro de train y validation\n    train_images_dir = os.path.join(train_dir, 'images')\n    train_labels_dir = os.path.join(train_dir, 'labels')\n    val_images_dir = os.path.join(val_dir, 'images')\n    val_labels_dir = os.path.join(val_dir, 'labels')\n    os.makedirs(train_images_dir, exist_ok=True)\n    os.makedirs(train_labels_dir, exist_ok=True)\n    os.makedirs(val_images_dir, exist_ok=True)\n    os.makedirs(val_labels_dir, exist_ok=True)\n    print(f'Copiando a las carpetas de entrenamiento')\n    # Copiar las imágenes y etiquetas a los directorios correspondientes\n    for index in train_data.index:\n        shutil.copy(os.path.join(path_images, train_data.loc[index, 'image']), os.path.join(train_images_dir, train_data.loc[index, 'image']))\n        shutil.copy(os.path.join(path_labels, train_data.loc[index, 'label']), os.path.join(train_labels_dir, train_data.loc[index, 'label']))\n    for index in val_data.index:\n        shutil.copy(os.path.join(path_images, val_data.loc[index, 'image']), os.path.join(val_images_dir, val_data.loc[index, 'image']))\n        shutil.copy(os.path.join(path_labels, val_data.loc[index, 'label']), os.path.join(val_labels_dir, val_data.loc[index, 'label']))\n    print(\"Copiado\")\n    # Crear el archivo YAML\n    yaml_path = os.path.join('/kaggle/working', f'data_{experiment + 1}.yaml')\n    yaml_content = f\"\"\"\n                    names:\n                        0: crosswalk\n                    train: {train_dir}/images\n                    val: {val_dir}/images\n                    \"\"\"\n    # Guardar el archivo\n    with open(yaml_path, 'w') as file:\n        file.write(yaml_content)\n    print(\"Archivo .yaml creado con éxito.\")\n    \n    experiment_result_path=f'/kaggle/working/experiment_{experiment+1}/training_results'\n    \n    os.makedirs(experiment_result_path, exist_ok=True)\n    \n    model.train(data=yaml_path,\n                    epochs=max_epochs, # Número máximo de epochs para el entrenamiento\n                    imgsz=512,\n                    cache=True,\n                    patience=patience,\n                \n                    #batch=32,\n                    save_period=25,\n                    seed=123,\n                    #time=2,\n                    #save=True,\n                    plots=True,\n                    project=f'proyect_experiment{1}',\n                    device=[0, 1],\n                    ## Esto especifica el uso de las GPUs 0 y 1\n                        )  # Ajustar epochs e imgsz según tus necesidades\n    evaluate_model(model,f'experiment_{experiment}')\n    \n    # Export the model\n    #model.export(format=\"onnx\")\n    model.save(f'{save_weights_dir}/experiment{experiment}')\n        \n\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-08T06:47:45.823581Z","iopub.execute_input":"2024-07-08T06:47:45.824064Z","iopub.status.idle":"2024-07-08T07:16:54.433436Z","shell.execute_reply.started":"2024-07-08T06:47:45.824040Z","shell.execute_reply":"2024-07-08T07:16:54.432133Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Experimento 1\nCopiando a las carpetas de entrenamiento\nCopiado\nArchivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mengine/trainer: \u001b[0mtask=detect, mode=train, model=yolov8n.pt, data=/kaggle/working/data_1.yaml, epochs=150, time=None, patience=10, batch=16, imgsz=512, save=True, save_period=25, cache=True, device=[0, 1], workers=8, project=proyect_experiment1, name=train, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=123, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=proyect_experiment1/train\nDownloading https://ultralytics.com/assets/Arial.ttf to '/root/.config/Ultralytics/Arial.ttf'...\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 755k/755k [00:00<00:00, 26.0MB/s]\n2024-07-08 06:48:05,192\tINFO util.py:124 -- Outdated packages:\n  ipywidgets==7.7.1 found, needs ipywidgets>=8\nRun `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n2024-07-08 06:48:05,987\tINFO util.py:124 -- Outdated packages:\n  ipywidgets==7.7.1 found, needs ipywidgets>=8\nRun `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n","output_type":"stream"},{"name":"stdout","text":"Overriding model.yaml nc=80 with nc=1\n\n                   from  n    params  module                                       arguments                     \n  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 \n  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                \n  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             \n  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                \n  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             \n  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               \n  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           \n  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              \n  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           \n  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 \n 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 \n 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  \n 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                \n 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 \n 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              \n 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 \n 22        [15, 18, 21]  1    751507  ultralytics.nn.modules.head.Detect           [1, [64, 128, 256]]           \nModel summary: 225 layers, 3011043 parameters, 3011027 gradients, 8.2 GFLOPs\n\nTransferred 319/355 items from pretrained weights\n\u001b[34m\u001b[1mDDP:\u001b[0m debug command /opt/conda/bin/python3.10 -m torch.distributed.run --nproc_per_node 2 --master_port 33327 /root/.config/Ultralytics/DDP/_temp_bfs2cmw_137367268111984.py\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir proyect_experiment1/train', view at http://localhost:6006/\n","output_type":"stream"},{"name":"stderr","text":"wandb: Tracking run with wandb version 0.17.0\nwandb: W&B syncing is set to `offline` in this directory.  \nwandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.\n","output_type":"stream"},{"name":"stdout","text":"Overriding model.yaml nc=80 with nc=1\nTransferred 319/355 items from pretrained weights\nFreezing layer 'model.22.dfl.conv.weight'\n\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks with YOLOv8n...\n\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ✅\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mScanning /kaggle/working/experiment_1/train_data_1/labels... 825 images, 226 backgrounds, 0 corrupt: 100%|██████████| 1035/1035 [00:00<00:00, 1294.43it/s]\n  0%|          | 0/1035 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: /kaggle/working/experiment_1/train_data_1/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mCaching images (0.8GB RAM): 100%|██████████| 1035/1035 [00:01<00:00, 976.58it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/experiment_1/val_data_1/labels... 49 images, 211 backgrounds, 0 corrupt: 100%|██████████| 259/259 [00:00<00:00, 2320.08it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/experiment_1/val_data_1/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 259/259 [00:00<00:00, 562.14it/s]\n","output_type":"stream"},{"name":"stdout","text":"Plotting labels to proyect_experiment1/train/labels.jpg... \n\u001b[34m\u001b[1moptimizer:\u001b[0m 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... \n\u001b[34m\u001b[1moptimizer:\u001b[0m AdamW(lr=0.000714, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mmodel graph visualization added ✅\nImage sizes 512 train, 512 val\nUsing 4 dataloader workers\nLogging results to \u001b[1mproyect_experiment1/train\u001b[0m\nStarting training for 150 epochs...\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      1/150     0.889G      1.769      2.854      1.743          8        512: 100%|██████████| 65/65 [00:12<00:00,  5.40it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:02<00:00,  6.07it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0752      0.308     0.0559     0.0195\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      2/150     0.841G      1.319      2.272      1.392         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.63it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.25it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0542      0.256     0.0659     0.0217\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      3/150     0.841G      1.276      1.925      1.337         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.99it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.44it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0445      0.244     0.0526      0.026\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      4/150     0.841G      1.197       1.76      1.275         18        512: 100%|██████████| 65/65 [00:08<00:00,  7.50it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.09it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0611      0.513      0.046     0.0248\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      5/150     0.849G      1.162      1.711       1.27          6        512: 100%|██████████| 65/65 [00:08<00:00,  8.02it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.05it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0698      0.538     0.0628     0.0343\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      6/150     0.845G      1.106      1.625      1.228         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.88it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.06it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0994      0.244     0.0847     0.0473\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      7/150     0.849G      1.055      1.423      1.195         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.30it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.18it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0732      0.141     0.0521     0.0286\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      8/150     0.841G      1.002      1.396      1.179         14        512: 100%|██████████| 65/65 [00:08<00:00,  7.74it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.19it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0839      0.308     0.0671       0.04\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      9/150     0.849G      1.001      1.349      1.155         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.93it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.12it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0822      0.449     0.0878      0.045\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     10/150     0.847G     0.9792      1.351      1.158         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.53it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 15.11it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0654      0.244      0.054     0.0333\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     11/150     0.847G     0.9215      1.197      1.116         17        512: 100%|██████████| 65/65 [00:08<00:00,  7.94it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.98it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.175      0.128      0.105     0.0657\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     12/150     0.835G     0.8791      1.141      1.103         10        512: 100%|██████████| 65/65 [00:08<00:00,  8.04it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.45it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.065      0.474     0.0625     0.0386\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     13/150     0.843G     0.9244      1.158      1.106          9        512: 100%|██████████| 65/65 [00:08<00:00,  7.58it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.77it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0654      0.408     0.0548     0.0326\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     14/150     0.847G      0.897      1.084      1.097         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.92it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.85it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0714      0.372     0.0623     0.0389\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     15/150     0.847G     0.8452      1.064      1.079         12        512: 100%|██████████| 65/65 [00:08<00:00,  7.99it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.84it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0917      0.218     0.0738      0.048\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     16/150     0.835G     0.7975     0.9925      1.059         19        512: 100%|██████████| 65/65 [00:08<00:00,  7.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.12it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0765      0.333     0.0674     0.0419\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     17/150     0.843G      0.807      1.002      1.068         13        512: 100%|██████████| 65/65 [00:08<00:00,  8.02it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.68it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78       0.11      0.179     0.0729     0.0447\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     18/150     0.847G     0.8138      1.013      1.073          7        512: 100%|██████████| 65/65 [00:08<00:00,  8.01it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.21it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.103      0.192       0.08     0.0516\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     19/150     0.847G      0.794     0.9999      1.052         19        512: 100%|██████████| 65/65 [00:08<00:00,  7.48it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.40it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.107      0.288     0.0737     0.0486\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     20/150     0.839G     0.7912     0.9716      1.061         24        512: 100%|██████████| 65/65 [00:08<00:00,  8.00it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.48it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0739      0.462     0.0619     0.0402\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     21/150     0.847G     0.7963     0.9521      1.054         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.95it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.02it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0891      0.333     0.0727     0.0493\n\u001b[34m\u001b[1mEarlyStopping: \u001b[0mTraining stopped early as no improvement observed in last 10 epochs. Best results observed at epoch 11, best model saved as best.pt.\nTo update EarlyStopping(patience=10) pass a new patience value, i.e. `patience=300` or use `patience=0` to disable EarlyStopping.\n\n21 epochs completed in 0.064 hours.\nOptimizer stripped from proyect_experiment1/train/weights/last.pt, 6.2MB\nOptimizer stripped from proyect_experiment1/train/weights/best.pt, 6.2MB\n\nValidating proyect_experiment1/train/weights/best.pt...\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\nModel summary (fused): 168 layers, 3005843 parameters, 0 gradients, 8.1 GFLOPs\n","output_type":"stream"},{"name":"stderr","text":"                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:02<00:00,  6.12it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.175      0.128      0.105     0.0657\nSpeed: 0.3ms preprocess, 1.9ms inference, 0.0ms loss, 1.7ms postprocess per image\nResults saved to \u001b[1mproyect_experiment1/train\u001b[0m\n","output_type":"stream"},{"name":"stderr","text":"wandb:                                                                                \nwandb: \nwandb: Run history:\nwandb:                  lr/pg0 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇\nwandb:                  lr/pg1 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇\nwandb:                  lr/pg2 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇\nwandb:        metrics/mAP50(B) ▂▃▂▁▃▆▂▄▆▂█▃▂▃▄▄▄▅▄▃█\nwandb:     metrics/mAP50-95(B) ▁▁▂▂▃▅▂▄▅▃█▄▃▄▅▄▅▆▅▄█\nwandb:    metrics/precision(B) ▃▂▁▂▂▄▃▃▃▂█▂▂▂▄▃▅▄▄▃█\nwandb:       metrics/recall(B) ▄▃▃██▃▁▄▆▃▁▇▆▅▃▄▂▂▄▇▁\nwandb:            model/GFLOPs ▁\nwandb:        model/parameters ▁\nwandb: model/speed_PyTorch(ms) ▁\nwandb:          train/box_loss █▅▄▄▄▃▃▃▂▂▂▂▂▂▁▁▁▁▁▁▁\nwandb:          train/cls_loss █▆▅▄▄▃▃▃▂▂▂▂▂▁▁▁▁▁▁▁▁\nwandb:          train/dfl_loss █▄▄▃▃▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁\nwandb:            val/box_loss █▆▅▄▂▃▃▃▃▃▂▃▃▃▂▂▂▂▂▂▁\nwandb:            val/cls_loss █▆█▇▄▃▃▄▂▃▃▃▃▁▂▆▂▁▂▂▂\nwandb:            val/dfl_loss █▇▇▅▃▃▄▃▃▄▃▄▃▃▃▃▃▂▃▃▁\nwandb: \nwandb: Run summary:\nwandb:                  lr/pg0 0.00062\nwandb:                  lr/pg1 0.00062\nwandb:                  lr/pg2 0.00062\nwandb:        metrics/mAP50(B) 0.10451\nwandb:     metrics/mAP50-95(B) 0.0657\nwandb:    metrics/precision(B) 0.17532\nwandb:       metrics/recall(B) 0.12821\nwandb:            model/GFLOPs 8.194\nwandb:        model/parameters 3011043\nwandb: model/speed_PyTorch(ms) 3.181\nwandb:          train/box_loss 0.79628\nwandb:          train/cls_loss 0.95211\nwandb:          train/dfl_loss 1.0536\nwandb:            val/box_loss 1.17766\nwandb:            val/cls_loss 5.66403\nwandb:            val/dfl_loss 1.29328\nwandb: \nwandb: You can sync this run to the cloud by running:\nwandb: wandb sync /kaggle/working/wandb/offline-run-20240708_064829-nfagaahx\nwandb: Find logs at: ./wandb/offline-run-20240708_064829-nfagaahx/logs\n","output_type":"stream"},{"name":"stdout","text":"Archivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\nModel summary (fused): 168 layers, 3005843 parameters, 0 gradients, 8.1 GFLOPs\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/test_folder/test_images... 0 images, 229 backgrounds, 0 corrupt: 100%|██████████| 229/229 [00:00<00:00, 2314.17it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0mWARNING ⚠️ No labels found in /kaggle/working/test_folder/test_images.cache. See https://docs.ultralytics.com/datasets for dataset formatting guidance.\n\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/test_folder/test_images.cache\nWARNING ⚠️ No labels found in /kaggle/working/test_folder/test_images.cache, training may not work correctly. See https://docs.ultralytics.com/datasets for dataset formatting guidance.\n","output_type":"stream"},{"name":"stderr","text":"\n\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 229/229 [00:00<00:00, 1170.54it/s]\n/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 15/15 [00:02<00:00,  5.08it/s]","output_type":"stream"},{"name":"stdout","text":"                   all        229          0          0          0          0          0\nWARNING ⚠️ no labels found in detect set, can not compute metrics without labels\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"name":"stdout","text":"Speed: 0.3ms preprocess, 3.4ms inference, 0.0ms loss, 2.6ms postprocess per image\nSaving /kaggle/working/validation_results/experimentexperiment_0/predictions.json...\nResults saved to \u001b[1m/kaggle/working/validation_results/experimentexperiment_0\u001b[0m\nExperimento 2\nCopiando a las carpetas de entrenamiento\nCopiado\nArchivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mengine/trainer: \u001b[0mtask=detect, mode=train, model=yolov8n.pt, data=/kaggle/working/data_2.yaml, epochs=150, time=None, patience=10, batch=16, imgsz=512, save=True, save_period=25, cache=True, device=[0, 1], workers=8, project=proyect_experiment1, name=train2, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=123, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.0, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=proyect_experiment1/train2\n\n                   from  n    params  module                                       arguments                     \n  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 \n  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                \n  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             \n  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                \n  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             \n  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               \n  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           \n  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              \n  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           \n  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 \n 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 \n 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  \n 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                \n 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 \n 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              \n 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 \n 22        [15, 18, 21]  1    751507  ultralytics.nn.modules.head.Detect           [1, [64, 128, 256]]           \nModel summary: 225 layers, 3011043 parameters, 3011027 gradients, 8.2 GFLOPs\n\nTransferred 70/355 items from pretrained weights\n\u001b[34m\u001b[1mDDP:\u001b[0m debug command /opt/conda/bin/python3.10 -m torch.distributed.run --nproc_per_node 2 --master_port 46803 /root/.config/Ultralytics/DDP/_temp_blfj02lf137364847620736.py\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir proyect_experiment1/train2', view at http://localhost:6006/\n","output_type":"stream"},{"name":"stderr","text":"wandb: Tracking run with wandb version 0.17.0\nwandb: W&B syncing is set to `offline` in this directory.  \nwandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.\n","output_type":"stream"},{"name":"stdout","text":"Overriding model.yaml nc=80 with nc=1\nTransferred 319/355 items from pretrained weights\nFreezing layer 'model.22.dfl.conv.weight'\n\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks with YOLOv8n...\n\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ✅\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mScanning /kaggle/working/experiment_2/train_data_2/labels... 825 images, 226 backgrounds, 0 corrupt: 100%|██████████| 1035/1035 [00:00<00:00, 1226.65it/s]\n  0%|          | 0/1035 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: /kaggle/working/experiment_2/train_data_2/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mCaching images (0.8GB RAM): 100%|██████████| 1035/1035 [00:01<00:00, 956.66it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/experiment_2/val_data_2/labels... 49 images, 211 backgrounds, 0 corrupt: 100%|██████████| 259/259 [00:00<00:00, 2602.61it/s]\n  0%|          | 0/259 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/experiment_2/val_data_2/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 259/259 [00:00<00:00, 568.69it/s]\n","output_type":"stream"},{"name":"stdout","text":"Plotting labels to proyect_experiment1/train2/labels.jpg... \n\u001b[34m\u001b[1moptimizer:\u001b[0m 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... \n\u001b[34m\u001b[1moptimizer:\u001b[0m AdamW(lr=0.000714, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mmodel graph visualization added ✅\nImage sizes 512 train, 512 val\nUsing 4 dataloader workers\nLogging results to \u001b[1mproyect_experiment1/train2\u001b[0m\nStarting training for 150 epochs...\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      1/150     0.889G      1.775      2.844      1.754          9        512: 100%|██████████| 65/65 [00:11<00:00,  5.71it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 10.46it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0387      0.538     0.0521     0.0201\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      2/150     0.841G      1.317      2.293      1.399         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.75it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.26it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0778      0.231     0.0595     0.0242\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      3/150     0.839G      1.246      1.928      1.328         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.46it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.66it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0554      0.397     0.0443     0.0231\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      4/150     0.837G      1.179      1.762      1.291         18        512: 100%|██████████| 65/65 [00:08<00:00,  7.96it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.21it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0997     0.0897     0.0491     0.0231\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      5/150     0.845G       1.12      1.695      1.258          6        512: 100%|██████████| 65/65 [00:08<00:00,  8.04it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.95it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0861      0.205     0.0741     0.0394\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      6/150     0.849G      1.099      1.605      1.226         15        512: 100%|██████████| 65/65 [00:08<00:00,  7.59it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.87it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0764      0.141     0.0621     0.0388\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      7/150     0.849G      1.069      1.451      1.214         10        512: 100%|██████████| 65/65 [00:08<00:00,  7.89it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.08it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0678      0.346     0.0555     0.0292\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      8/150     0.839G     0.9894      1.399      1.184         14        512: 100%|██████████| 65/65 [00:08<00:00,  7.92it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.09it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0854      0.308     0.0759     0.0446\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      9/150     0.849G     0.9854      1.313      1.163         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.48it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.04it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0731      0.462     0.0599     0.0323\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     10/150     0.847G      0.974      1.294      1.149         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.96it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.55it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0792      0.282     0.0821      0.039\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     11/150     0.847G     0.9062      1.218      1.129         17        512: 100%|██████████| 65/65 [00:08<00:00,  7.93it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.16it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.056      0.474     0.0528     0.0297\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     12/150     0.835G     0.8401      1.111      1.096         10        512: 100%|██████████| 65/65 [00:08<00:00,  7.57it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.38it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0716      0.205     0.0506     0.0296\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     13/150     0.843G     0.8689       1.12      1.089          9        512: 100%|██████████| 65/65 [00:08<00:00,  7.86it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.42it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0835      0.218     0.0807     0.0511\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     14/150     0.847G     0.8292      1.059      1.062         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.91it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.13it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.077      0.385     0.0671     0.0447\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     15/150     0.847G     0.8311      1.032      1.083         12        512: 100%|██████████| 65/65 [00:08<00:00,  7.51it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.72it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0859      0.282     0.0853     0.0528\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     16/150     0.835G     0.7931      1.007      1.066         19        512: 100%|██████████| 65/65 [00:08<00:00,  7.93it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.76it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0691      0.269     0.0689     0.0428\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     17/150     0.843G     0.8073      1.006      1.075         10        512: 100%|██████████| 65/65 [00:08<00:00,  7.93it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.06it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.104      0.205     0.0725     0.0411\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     18/150     0.847G      0.808      1.001      1.073          7        512: 100%|██████████| 65/65 [00:08<00:00,  7.62it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.31it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0863      0.244     0.0873     0.0572\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     19/150     0.847G     0.8078      1.005      1.065         19        512: 100%|██████████| 65/65 [00:08<00:00,  7.95it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.39it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.098      0.256     0.0861     0.0557\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     20/150     0.839G     0.7648     0.9521      1.056         25        512: 100%|██████████| 65/65 [00:08<00:00,  8.03it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.46it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0833        0.5     0.0787     0.0466\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     21/150     0.847G     0.7943     0.9438      1.051         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.62it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.76it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0758      0.308     0.0698      0.042\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     22/150     0.847G     0.7394     0.9097      1.048         14        512: 100%|██████████| 65/65 [00:08<00:00,  7.97it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.31it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0703      0.218      0.073     0.0463\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     23/150     0.847G     0.7005     0.8408      1.027         23        512: 100%|██████████| 65/65 [00:08<00:00,  7.91it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.03it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.135      0.256      0.104     0.0655\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     24/150     0.837G     0.7156     0.8813      1.025         14        512: 100%|██████████| 65/65 [00:08<00:00,  7.58it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.80it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0953      0.333     0.0899     0.0543\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     25/150     0.847G      0.708     0.8365      1.029         10        512: 100%|██████████| 65/65 [00:07<00:00,  8.14it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.92it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0657      0.551     0.0666     0.0439\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     26/150     0.843G     0.7275     0.8532      1.029          7        512: 100%|██████████| 65/65 [00:08<00:00,  7.98it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.46it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0808      0.282     0.0841     0.0594\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     27/150     0.847G     0.6886     0.8248      1.015         18        512: 100%|██████████| 65/65 [00:08<00:00,  7.76it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.62it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0609      0.372     0.0645     0.0435\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     28/150     0.839G     0.6901     0.8026      1.018         16        512: 100%|██████████| 65/65 [00:08<00:00,  8.04it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.20it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0937      0.346       0.09     0.0605\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     29/150     0.847G     0.7019     0.7955      1.018         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.96it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.17it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0727       0.39     0.0834     0.0566\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     30/150     0.843G     0.6934     0.8024      1.012         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.99it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 12.93it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0999      0.359        0.1     0.0654\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     31/150     0.847G     0.6673     0.7964      1.006         15        512: 100%|██████████| 65/65 [00:08<00:00,  8.01it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.48it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.126      0.215     0.0854     0.0577\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     32/150     0.837G     0.6273     0.7729     0.9929         11        512: 100%|██████████| 65/65 [00:08<00:00,  8.02it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.21it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.148      0.282     0.0925     0.0641\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     33/150     0.847G     0.6282     0.7617     0.9971         22        512: 100%|██████████| 65/65 [00:08<00:00,  8.09it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.65it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0898      0.359     0.0891     0.0607\n\u001b[34m\u001b[1mEarlyStopping: \u001b[0mTraining stopped early as no improvement observed in last 10 epochs. Best results observed at epoch 23, best model saved as best.pt.\nTo update EarlyStopping(patience=10) pass a new patience value, i.e. `patience=300` or use `patience=0` to disable EarlyStopping.\n\n33 epochs completed in 0.098 hours.\nOptimizer stripped from proyect_experiment1/train2/weights/last.pt, 6.2MB\nOptimizer stripped from proyect_experiment1/train2/weights/best.pt, 6.2MB\n\nValidating proyect_experiment1/train2/weights/best.pt...\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\nModel summary (fused): 168 layers, 3005843 parameters, 0 gradients, 8.1 GFLOPs\n","output_type":"stream"},{"name":"stderr","text":"                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:02<00:00,  6.95it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.136      0.256      0.103     0.0658\nSpeed: 0.2ms preprocess, 1.8ms inference, 0.0ms loss, 3.5ms postprocess per image\nResults saved to \u001b[1mproyect_experiment1/train2\u001b[0m\n","output_type":"stream"},{"name":"stderr","text":"wandb:                                                                                \nwandb: \nwandb: Run history:\nwandb:                  lr/pg0 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆\nwandb:                  lr/pg1 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆\nwandb:                  lr/pg2 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆\nwandb:        metrics/mAP50(B) ▂▃▁▂▅▃▂▅▃▅▂▂▅▄▆▄▄▆▆▅▄▄█▆▄▆▃▆▆█▆▇█\nwandb:     metrics/mAP50-95(B) ▁▂▁▁▄▄▂▅▃▄▂▂▆▅▆▄▄▇▆▅▄▅█▆▅▇▅▇▇█▇██\nwandb:    metrics/precision(B) ▁▄▂▅▄▃▃▄▃▄▂▃▄▃▄▃▅▄▅▄▃▃▇▅▃▄▂▅▃▅▇█▇\nwandb:       metrics/recall(B) █▃▆▁▃▂▅▄▇▄▇▃▃▅▄▄▃▃▄▇▄▃▄▅█▄▅▅▆▅▃▄▄\nwandb:            model/GFLOPs ▁\nwandb:        model/parameters ▁\nwandb: model/speed_PyTorch(ms) ▁\nwandb:          train/box_loss █▅▅▄▄▄▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▁▂▁▂▁▁▁▁▁▁▁\nwandb:          train/cls_loss █▆▅▄▄▄▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁\nwandb:          train/dfl_loss █▅▄▄▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁\nwandb:            val/box_loss █▇▄▄▄▃▄▃▄▄▄▄▂▃▃▂▃▂▃▂▂▂▂▁▂▁▂▂▂▂▂▂▁\nwandb:            val/cls_loss ▅▆█▃▅▃▂▃▁▃▂▅▂▂▃▂▂▁▂▂▃▁▁▂▂▂▁▂▁▁▂▁▁\nwandb:            val/dfl_loss ██▄▅▄▃▄▃▄▅▄▆▂▄▄▃▄▃▄▃▂▂▂▂▂▂▂▂▂▂▂▂▁\nwandb: \nwandb: Run summary:\nwandb:                  lr/pg0 0.00056\nwandb:                  lr/pg1 0.00056\nwandb:                  lr/pg2 0.00056\nwandb:        metrics/mAP50(B) 0.1033\nwandb:     metrics/mAP50-95(B) 0.06584\nwandb:    metrics/precision(B) 0.13606\nwandb:       metrics/recall(B) 0.25641\nwandb:            model/GFLOPs 8.194\nwandb:        model/parameters 3011043\nwandb: model/speed_PyTorch(ms) 2.958\nwandb:          train/box_loss 0.62818\nwandb:          train/cls_loss 0.76166\nwandb:          train/dfl_loss 0.99705\nwandb:            val/box_loss 1.19059\nwandb:            val/cls_loss 4.84666\nwandb:            val/dfl_loss 1.28527\nwandb: \nwandb: You can sync this run to the cloud by running:\nwandb: wandb sync /kaggle/working/wandb/offline-run-20240708_065328-b5qd8njs\nwandb: Find logs at: ./wandb/offline-run-20240708_065328-b5qd8njs/logs\n","output_type":"stream"},{"name":"stdout","text":"Archivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\nModel summary (fused): 168 layers, 3005843 parameters, 0 gradients, 8.1 GFLOPs\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/test_folder/test_images.cache... 0 images, 229 backgrounds, 0 corrupt: 100%|██████████| 229/229 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"WARNING ⚠️ No labels found in /kaggle/working/test_folder/test_images.cache, training may not work correctly. See https://docs.ultralytics.com/datasets for dataset formatting guidance.\n","output_type":"stream"},{"name":"stderr","text":"\n\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 229/229 [00:10<00:00, 22.67it/s]  \n/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 15/15 [00:03<00:00,  4.86it/s]","output_type":"stream"},{"name":"stdout","text":"                   all        229          0          0          0          0          0\nWARNING ⚠️ no labels found in detect set, can not compute metrics without labels\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"name":"stdout","text":"Speed: 0.2ms preprocess, 2.7ms inference, 0.0ms loss, 1.7ms postprocess per image\nSaving /kaggle/working/validation_results/experimentexperiment_1/predictions.json...\nResults saved to \u001b[1m/kaggle/working/validation_results/experimentexperiment_1\u001b[0m\nExperimento 3\nCopiando a las carpetas de entrenamiento\nCopiado\nArchivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mengine/trainer: \u001b[0mtask=detect, mode=train, model=yolov8n.pt, data=/kaggle/working/data_3.yaml, epochs=150, time=None, patience=10, batch=16, imgsz=512, save=True, save_period=25, cache=True, device=[0, 1], workers=8, project=proyect_experiment1, name=train22, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=123, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.0, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=proyect_experiment1/train22\n\n                   from  n    params  module                                       arguments                     \n  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 \n  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                \n  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             \n  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                \n  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             \n  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               \n  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           \n  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              \n  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           \n  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 \n 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 \n 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  \n 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                \n 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 \n 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              \n 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 \n 22        [15, 18, 21]  1    751507  ultralytics.nn.modules.head.Detect           [1, [64, 128, 256]]           \nModel summary: 225 layers, 3011043 parameters, 3011027 gradients, 8.2 GFLOPs\n\nTransferred 70/355 items from pretrained weights\n\u001b[34m\u001b[1mDDP:\u001b[0m debug command /opt/conda/bin/python3.10 -m torch.distributed.run --nproc_per_node 2 --master_port 50247 /root/.config/Ultralytics/DDP/_temp_dsq7v_n9137363760407136.py\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir proyect_experiment1/train22', view at http://localhost:6006/\n","output_type":"stream"},{"name":"stderr","text":"wandb: Tracking run with wandb version 0.17.0\nwandb: W&B syncing is set to `offline` in this directory.  \nwandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.\n","output_type":"stream"},{"name":"stdout","text":"Overriding model.yaml nc=80 with nc=1\nTransferred 319/355 items from pretrained weights\nFreezing layer 'model.22.dfl.conv.weight'\n\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks with YOLOv8n...\n\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ✅\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mScanning /kaggle/working/experiment_3/train_data_3/labels... 825 images, 226 backgrounds, 0 corrupt: 100%|██████████| 1035/1035 [00:00<00:00, 1280.18it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: /kaggle/working/experiment_3/train_data_3/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mCaching images (0.8GB RAM): 100%|██████████| 1035/1035 [00:01<00:00, 969.62it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/experiment_3/val_data_3/labels... 49 images, 211 backgrounds, 0 corrupt: 100%|██████████| 259/259 [00:00<00:00, 2170.90it/s]\n  0%|          | 0/259 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/experiment_3/val_data_3/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 259/259 [00:00<00:00, 619.08it/s]\n","output_type":"stream"},{"name":"stdout","text":"Plotting labels to proyect_experiment1/train22/labels.jpg... \n\u001b[34m\u001b[1moptimizer:\u001b[0m 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... \n\u001b[34m\u001b[1moptimizer:\u001b[0m AdamW(lr=0.000714, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mmodel graph visualization added ✅\nImage sizes 512 train, 512 val\nUsing 4 dataloader workers\nLogging results to \u001b[1mproyect_experiment1/train22\u001b[0m\nStarting training for 150 epochs...\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      1/150     0.889G      1.743      2.852      1.726          8        512: 100%|██████████| 65/65 [00:11<00:00,  5.83it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 10.42it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0316      0.615     0.0456     0.0187\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      2/150     0.841G        1.3      2.218      1.386         14        512: 100%|██████████| 65/65 [00:08<00:00,  7.76it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.09it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.063      0.385     0.0644     0.0357\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      3/150     0.841G       1.24      1.939      1.326         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.90it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.55it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0567      0.192     0.0425      0.019\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      4/150     0.839G      1.191      1.752      1.284         17        512: 100%|██████████| 65/65 [00:08<00:00,  7.96it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.09it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.089      0.231      0.051     0.0256\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      5/150     0.849G      1.159      1.675       1.27          7        512: 100%|██████████| 65/65 [00:08<00:00,  7.88it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.57it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0538      0.526     0.0482     0.0263\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      6/150     0.845G      1.126      1.628      1.231         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.94it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.23it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0618      0.179     0.0441     0.0227\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      7/150     0.849G      1.067      1.469      1.203         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.92it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.63it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.132      0.205     0.0771     0.0359\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      8/150     0.839G     0.9854      1.408      1.174         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.76it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.75it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0799      0.282     0.0768     0.0448\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      9/150     0.849G     0.9864      1.327      1.157         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.98it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.53it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0779      0.321     0.0637     0.0352\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     10/150     0.843G     0.9937      1.322      1.156         10        512: 100%|██████████| 65/65 [00:08<00:00,  7.92it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.38it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0962       0.41     0.0765     0.0453\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     11/150     0.847G     0.9342      1.199      1.112         15        512: 100%|██████████| 65/65 [00:08<00:00,  7.53it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.48it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.101      0.192     0.0889     0.0588\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     12/150     0.835G     0.8859      1.179        1.1         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.93it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.17it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0935      0.154     0.0657     0.0391\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     13/150     0.843G     0.8752      1.142      1.089          9        512: 100%|██████████| 65/65 [00:08<00:00,  8.00it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.64it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.067      0.449     0.0691     0.0405\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     14/150     0.847G     0.8438      1.093      1.072         15        512: 100%|██████████| 65/65 [00:08<00:00,  7.43it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.10it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.103      0.269     0.0694     0.0414\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     15/150     0.847G     0.8615      1.076      1.071         15        512: 100%|██████████| 65/65 [00:08<00:00,  8.05it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.52it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0701      0.449      0.062     0.0368\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mCaching images (0.8GB RAM): 100%|██████████| 1035/1035 [00:01<00:00, 956.04it/s]5 [00:03<00:04,  8.20it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/experiment_4/val_data_4/labels... 49 images, 211 backgrounds, 0 corrupt: 100%|██████████| 259/259 [00:00<00:00, 2623.71it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/experiment_4/val_data_4/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 259/259 [00:00<00:00, 596.56it/s]\n","output_type":"stream"},{"name":"stdout","text":"Plotting labels to proyect_experiment1/train222/labels.jpg... \n\u001b[34m\u001b[1moptimizer:\u001b[0m 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... \n\u001b[34m\u001b[1moptimizer:\u001b[0m AdamW(lr=0.000714, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mmodel graph visualization added ✅\nImage sizes 512 train, 512 val\nUsing 4 dataloader workers\nLogging results to \u001b[1mproyect_experiment1/train222\u001b[0m\nStarting training for 150 epochs...\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      1/150     0.889G       1.72      2.816      1.692          7        512: 100%|██████████| 65/65 [00:11<00:00,  5.50it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00,  9.88it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0543      0.115     0.0454     0.0139\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      2/150     0.841G      1.306      2.275      1.385         12        512: 100%|██████████| 65/65 [00:08<00:00,  7.66it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 12.98it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0564      0.372      0.046     0.0157\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      3/150     0.839G      1.269      1.938      1.313         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.88it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.03it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0602      0.462     0.0505     0.0225\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      4/150     0.835G      1.215       1.79      1.289         18        512: 100%|██████████| 65/65 [00:08<00:00,  7.49it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.53it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0709      0.128     0.0516     0.0248\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      5/150     0.845G      1.149      1.717      1.262          4        512: 100%|██████████| 65/65 [00:08<00:00,  7.96it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.57it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0738      0.372     0.0588     0.0309\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      6/150     0.849G      1.087      1.573      1.208         16        512: 100%|██████████| 65/65 [00:08<00:00,  8.08it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.19it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0853      0.449     0.0683     0.0354\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      7/150     0.849G      1.072      1.452      1.194         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.56it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.91it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.048        0.5     0.0504     0.0282\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      8/150     0.841G     0.9869      1.387      1.174         13        512: 100%|██████████| 65/65 [00:08<00:00,  8.01it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.02it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0949      0.282     0.0743     0.0391\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      9/150     0.849G     0.9774      1.298       1.14         11        512: 100%|██████████| 65/65 [00:08<00:00,  8.00it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.30it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0777      0.296      0.068     0.0393\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     10/150     0.843G      0.945      1.294      1.141         11        512: 100%|██████████| 65/65 [00:08<00:00,  7.59it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.90it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0717      0.385     0.0739     0.0393\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     11/150     0.847G      0.899      1.179      1.111         18        512: 100%|██████████| 65/65 [00:08<00:00,  8.02it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.18it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.106      0.295     0.0795     0.0437\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     12/150     0.835G     0.8979      1.138      1.107         10        512: 100%|██████████| 65/65 [00:08<00:00,  8.00it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.03it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.108      0.218     0.0724     0.0449\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     13/150     0.843G     0.8699      1.176      1.099          9        512: 100%|██████████| 65/65 [00:08<00:00,  7.51it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.84it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0694      0.462     0.0576     0.0357\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     14/150     0.847G     0.8316      1.043       1.06         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.81it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.84it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0653      0.397     0.0583     0.0342\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     15/150     0.847G     0.8199      1.055      1.055         13        512: 100%|██████████| 65/65 [00:08<00:00,  8.04it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.48it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.131      0.231     0.0777     0.0507\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     16/150     0.833G     0.8214       1.04      1.068         19        512: 100%|██████████| 65/65 [00:08<00:00,  7.71it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.88it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0824      0.282     0.0711     0.0396\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     17/150     0.843G     0.8073      1.026       1.07         11        512: 100%|██████████| 65/65 [00:08<00:00,  8.09it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.65it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0747      0.321     0.0672     0.0436\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     29/150     0.847G     0.6952     0.7956      1.011         17        512: 100%|██████████| 65/65 [00:08<00:00,  7.55it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.06it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0807      0.218     0.0682     0.0467\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     30/150     0.843G     0.6962     0.7667      1.006         16        512: 100%|██████████| 65/65 [00:08<00:00,  7.93it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.46it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.109      0.346     0.0935     0.0595\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     31/150     0.847G     0.6649      0.787      1.006         17        512: 100%|██████████| 65/65 [00:08<00:00,  7.99it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.19it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.107      0.179      0.076     0.0486\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     32/150     0.839G     0.6316     0.7773     0.9958         10        512: 100%|██████████| 65/65 [00:08<00:00,  7.48it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.12it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0757      0.346     0.0636     0.0393\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     33/150     0.847G      0.643     0.7679     0.9997         21        512: 100%|██████████| 65/65 [00:08<00:00,  7.96it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 14.47it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.101      0.308     0.0932     0.0613\n\u001b[34m\u001b[1mEarlyStopping: \u001b[0mTraining stopped early as no improvement observed in last 10 epochs. Best results observed at epoch 23, best model saved as best.pt.\nTo update EarlyStopping(patience=10) pass a new patience value, i.e. `patience=300` or use `patience=0` to disable EarlyStopping.\n\n33 epochs completed in 0.098 hours.\nOptimizer stripped from proyect_experiment1/train222/weights/last.pt, 6.2MB\nOptimizer stripped from proyect_experiment1/train222/weights/best.pt, 6.2MB\n\nValidating proyect_experiment1/train222/weights/best.pt...\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\nModel summary (fused): 168 layers, 3005843 parameters, 0 gradients, 8.1 GFLOPs\n","output_type":"stream"},{"name":"stderr","text":"                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:02<00:00,  6.27it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78      0.104      0.449     0.0957     0.0621\nSpeed: 0.1ms preprocess, 2.0ms inference, 0.0ms loss, 2.1ms postprocess per image\nResults saved to \u001b[1mproyect_experiment1/train222\u001b[0m\n","output_type":"stream"},{"name":"stderr","text":"wandb:                                                                                \nwandb: \nwandb: Run history:\nwandb:                  lr/pg0 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆\nwandb:                  lr/pg1 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆\nwandb:                  lr/pg2 ▁▅████████▇▇▇▇▇▇▇▇▇▇▇▇▇▇▆▆▆▆▆▆▆▆▆\nwandb:        metrics/mAP50(B) ▁▁▂▂▃▄▂▅▄▅▆▅▃▃▅▅▄▄▄▆▆▆██▅▆▆▄▄█▅▃█\nwandb:     metrics/mAP50-95(B) ▁▁▂▃▃▄▃▅▅▅▅▅▄▄▆▅▅▄▅▇▆▆█▇▆▆▆▅▆█▆▅█\nwandb:    metrics/precision(B) ▂▂▂▃▃▄▁▅▄▃▆▆▃▂█▄▃▆▃█▃▆▆▆▃▆▅▄▄▆▆▃▆\nwandb:       metrics/recall(B) ▁▆▇▁▆▇█▄▄▆▄▃▇▆▃▄▅▃▅▂▇▄▆▅▅▄▆▄▃▅▂▅▇\nwandb:            model/GFLOPs ▁\nwandb:        model/parameters ▁\nwandb: model/speed_PyTorch(ms) ▁\nwandb:          train/box_loss █▅▅▅▄▄▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁\nwandb:          train/cls_loss █▆▅▄▄▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁\nwandb:          train/dfl_loss █▅▄▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁\nwandb:            val/box_loss ██▅▆▄▅▄▄▄▄▄▄▄▄▄▃▃▃▃▂▃▃▂▂▂▃▃▃▂▂▄▂▁\nwandb:            val/cls_loss █▇█▃▅▅▆█▃▇▅▄▅▅▄▅▆▄▄▂▆▄▄▂▂▄▁▃▁▅▂▄▂\nwandb:            val/dfl_loss ▆█▅▇▄▅▄▄▄▄▄▄▄▄▃▃▄▃▃▂▃▃▂▂▂▃▃▃▂▁▄▂▁\nwandb: \nwandb: Run summary:\nwandb:                  lr/pg0 0.00056\nwandb:                  lr/pg1 0.00056\nwandb:                  lr/pg2 0.00056\nwandb:        metrics/mAP50(B) 0.0957\nwandb:     metrics/mAP50-95(B) 0.06209\nwandb:    metrics/precision(B) 0.10363\nwandb:       metrics/recall(B) 0.44872\nwandb:            model/GFLOPs 8.194\nwandb:        model/parameters 3011043\nwandb: model/speed_PyTorch(ms) 3.06\nwandb:          train/box_loss 0.643\nwandb:          train/cls_loss 0.76789\nwandb:          train/dfl_loss 0.99971\nwandb:            val/box_loss 1.0797\nwandb:            val/cls_loss 4.94625\nwandb:            val/dfl_loss 1.25068\nwandb: \nwandb: You can sync this run to the cloud by running:\nwandb: wandb sync /kaggle/working/wandb/offline-run-20240708_070528-mg2yvl9v\nwandb: Find logs at: ./wandb/offline-run-20240708_070528-mg2yvl9v/logs\n","output_type":"stream"},{"name":"stdout","text":"Archivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\nModel summary (fused): 168 layers, 3005843 parameters, 0 gradients, 8.1 GFLOPs\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/test_folder/test_images.cache... 0 images, 229 backgrounds, 0 corrupt: 100%|██████████| 229/229 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"WARNING ⚠️ No labels found in /kaggle/working/test_folder/test_images.cache, training may not work correctly. See https://docs.ultralytics.com/datasets for dataset formatting guidance.\n","output_type":"stream"},{"name":"stderr","text":"\n\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 229/229 [00:00<00:00, 1275.77it/s]\n/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 15/15 [00:02<00:00,  5.66it/s]","output_type":"stream"},{"name":"stdout","text":"                   all        229          0          0          0          0          0\nWARNING ⚠️ no labels found in detect set, can not compute metrics without labels\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"name":"stdout","text":"Speed: 0.2ms preprocess, 2.7ms inference, 0.0ms loss, 4.1ms postprocess per image\nSaving /kaggle/working/validation_results/experimentexperiment_3/predictions.json...\nResults saved to \u001b[1m/kaggle/working/validation_results/experimentexperiment_3\u001b[0m\nExperimento 5\nCopiando a las carpetas de entrenamiento\nCopiado\nArchivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mengine/trainer: \u001b[0mtask=detect, mode=train, model=yolov8n.pt, data=/kaggle/working/data_5.yaml, epochs=150, time=None, patience=10, batch=16, imgsz=512, save=True, save_period=25, cache=True, device=[0, 1], workers=8, project=proyect_experiment1, name=train2222, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=123, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.0, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=proyect_experiment1/train2222\n\n                   from  n    params  module                                       arguments                     \n  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 \n  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                \n  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             \n  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                \n  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             \n  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               \n  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           \n  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              \n  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           \n  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 \n 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 \n 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  \n 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                \n 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 \n 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              \n 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 \n 22        [15, 18, 21]  1    751507  ultralytics.nn.modules.head.Detect           [1, [64, 128, 256]]           \nModel summary: 225 layers, 3011043 parameters, 3011027 gradients, 8.2 GFLOPs\n\nTransferred 70/355 items from pretrained weights\n\u001b[34m\u001b[1mDDP:\u001b[0m debug command /opt/conda/bin/python3.10 -m torch.distributed.run --nproc_per_node 2 --master_port 50987 /root/.config/Ultralytics/DDP/_temp_hoqndttc137362592400336.py\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir proyect_experiment1/train2222', view at http://localhost:6006/\n","output_type":"stream"},{"name":"stderr","text":"wandb: Tracking run with wandb version 0.17.0\nwandb: W&B syncing is set to `offline` in this directory.  \nwandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.\n","output_type":"stream"},{"name":"stdout","text":"Overriding model.yaml nc=80 with nc=1\nTransferred 319/355 items from pretrained weights\nFreezing layer 'model.22.dfl.conv.weight'\n\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks with YOLOv8n...\n\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ✅\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mScanning /kaggle/working/experiment_5/train_data_5/labels... 825 images, 226 backgrounds, 0 corrupt: 100%|██████████| 1035/1035 [00:00<00:00, 1264.12it/s]\n  0%|          | 0/1035 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: /kaggle/working/experiment_5/train_data_5/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mCaching images (0.8GB RAM): 100%|██████████| 1035/1035 [00:01<00:00, 927.07it/s] \n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/experiment_5/val_data_5/labels... 49 images, 211 backgrounds, 0 corrupt: 100%|██████████| 259/259 [00:00<00:00, 2412.22it/s]\n  0%|          | 0/259 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/experiment_5/val_data_5/labels.cache\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 259/259 [00:00<00:00, 613.97it/s]\n","output_type":"stream"},{"name":"stdout","text":"Plotting labels to proyect_experiment1/train2222/labels.jpg... \n\u001b[34m\u001b[1moptimizer:\u001b[0m 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... \n\u001b[34m\u001b[1moptimizer:\u001b[0m AdamW(lr=0.000714, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)\n\u001b[34m\u001b[1mTensorBoard: \u001b[0mmodel graph visualization added ✅\nImage sizes 512 train, 512 val\nUsing 4 dataloader workers\nLogging results to \u001b[1mproyect_experiment1/train2222\u001b[0m\nStarting training for 150 epochs...\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      1/150     0.889G       1.76      2.847      1.736          8        512: 100%|██████████| 65/65 [00:11<00:00,  5.57it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 10.15it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0718      0.115     0.0555       0.02\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      2/150     0.841G      1.305      2.248      1.401         14        512: 100%|██████████| 65/65 [00:08<00:00,  7.58it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.99it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0863      0.256     0.0576     0.0264\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      3/150     0.839G       1.24      1.912      1.324         13        512: 100%|██████████| 65/65 [00:08<00:00,  7.87it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.72it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0745      0.295     0.0571     0.0283\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      4/150     0.841G      1.193      1.773      1.287         17        512: 100%|██████████| 65/65 [00:08<00:00,  7.31it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 12.99it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0558      0.321     0.0426     0.0194\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      5/150     0.849G      1.149      1.687      1.268          7        512: 100%|██████████| 65/65 [00:08<00:00,  8.10it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.69it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0726      0.462     0.0754     0.0457\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      6/150     0.849G      1.105      1.587       1.23         14        512: 100%|██████████| 65/65 [00:08<00:00,  7.97it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 17/17 [00:01<00:00, 13.88it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        259         78     0.0573      0.397     0.0529     0.0283\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"wandb:                                                                                ██████▌ | 56/65 [00:07<00:01,  8.28it/s]wandb: - 0.000 MB of 0.000 MB uploaded\nwandb: \nwandb: Run history:\nwandb:                  lr/pg0 ▁▅████████▇▇▇▇▇▇▇\nwandb:                  lr/pg1 ▁▅████████▇▇▇▇▇▇▇\nwandb:                  lr/pg2 ▁▅████████▇▇▇▇▇▇▇\nwandb:        metrics/mAP50(B) ▃▃▃▁▆▃█▆▅▅▇▁▃▄▄▅█\nwandb:     metrics/mAP50-95(B) ▁▃▃▁█▃█▇▆▅▇▂▄▆▆██\nwandb:    metrics/precision(B) ▃▅▄▁▃▁█▆▅▅▅▁▃▃▅▄█\nwandb:       metrics/recall(B) ▁▃▄▄▇▆▃▃▃▄▄▂▆▆▂█▃\nwandb:            model/GFLOPs ▁\nwandb:        model/parameters ▁\nwandb: model/speed_PyTorch(ms) ▁\nwandb:          train/box_loss █▅▄▄▄▃▃▃▂▂▂▂▂▁▁▁▁\nwandb:          train/cls_loss █▆▄▄▄▃▃▂▂▂▂▂▂▁▁▁▁\nwandb:          train/dfl_loss █▄▄▃▃▃▃▂▂▂▁▁▁▁▁▁▁\nwandb:            val/box_loss █▆▅▆▄▃▄▃▄▄▃▄▃▂▂▁▁\nwandb:            val/cls_loss ▄▄█▃▃▃▂▃▁▂▂▂▃▁▃▂▃\nwandb:            val/dfl_loss █▅▆█▃▃▅▅▃▄▃▄▃▁▃▁▂\nwandb: \nwandb: Run summary:\nwandb:                  lr/pg0 0.00064\nwandb:                  lr/pg1 0.00064\nwandb:                  lr/pg2 0.00064\nwandb:        metrics/mAP50(B) 0.08721\nwandb:     metrics/mAP50-95(B) 0.04651\nwandb:    metrics/precision(B) 0.11116\nwandb:       metrics/recall(B) 0.21488\nwandb:            model/GFLOPs 8.194\nwandb:        model/parameters 3011043\nwandb: model/speed_PyTorch(ms) 2.909\nwandb:          train/box_loss 0.81645\nwandb:          train/cls_loss 1.00787\nwandb:          train/dfl_loss 1.07082\nwandb:            val/box_loss 1.28032\nwandb:            val/cls_loss 6.7279\nwandb:            val/dfl_loss 1.41858\nwandb: \nwandb: You can sync this run to the cloud by running:\nwandb: wandb sync /kaggle/working/wandb/offline-run-20240708_071225-cijzddh7\nwandb: Find logs at: ./wandb/offline-run-20240708_071225-cijzddh7/logs\n","output_type":"stream"},{"name":"stdout","text":"Archivo .yaml creado con éxito.\nUltralytics YOLOv8.2.50 🚀 Python-3.10.13 torch-2.1.2 CUDA:0 (Tesla T4, 15095MiB)\n                                                      CUDA:1 (Tesla T4, 15095MiB)\nModel summary (fused): 168 layers, 3005843 parameters, 0 gradients, 8.1 GFLOPs\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/test_folder/test_images.cache... 0 images, 229 backgrounds, 0 corrupt: 100%|██████████| 229/229 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"WARNING ⚠️ No labels found in /kaggle/working/test_folder/test_images.cache, training may not work correctly. See https://docs.ultralytics.com/datasets for dataset formatting guidance.\n","output_type":"stream"},{"name":"stderr","text":"\n\u001b[34m\u001b[1mval: \u001b[0mCaching images (0.2GB RAM): 100%|██████████| 229/229 [00:00<00:00, 1280.05it/s]\n/opt/conda/lib/python3.10/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  self.pid = os.fork()\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 15/15 [00:02<00:00,  5.67it/s]","output_type":"stream"},{"name":"stdout","text":"                   all        229          0          0          0          0          0\nWARNING ⚠️ no labels found in detect set, can not compute metrics without labels\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"},{"name":"stdout","text":"Speed: 0.2ms preprocess, 2.7ms inference, 0.0ms loss, 5.1ms postprocess per image\nSaving /kaggle/working/validation_results/experimentexperiment_4/predictions.json...\nResults saved to \u001b[1m/kaggle/working/validation_results/experimentexperiment_4\u001b[0m\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport zipfile\n\ndef comprimir_carpeta(carpeta_origen, archivo_destino):\n    try:\n        # Asegurarse de que la carpeta de origen existe\n        if not os.path.exists(carpeta_origen):\n            raise FileNotFoundError(f\"La carpeta de origen '{carpeta_origen}' no existe.\")\n\n        # Crear el archivo ZIP\n        with zipfile.ZipFile(archivo_destino, 'w', zipfile.ZIP_DEFLATED) as zipf:\n            # Recorrer el directorio y agregar archivos al ZIP\n            for raiz, dirs, archivos in os.walk(carpeta_origen):\n                for archivo in archivos:\n                    ruta_completa = os.path.join(raiz, archivo)\n                    ruta_relativa = os.path.relpath(ruta_completa, carpeta_origen)\n                    zipf.write(ruta_completa, ruta_relativa)\n\n        print(f\"Compresión completada. Archivo ZIP creado en: {archivo_destino}\")\n    except Exception as e:\n        print(f\"Error durante la compresión: {str(e)}\")\n\n# Ejemplo de uso\ncarpeta_origen = \"/kaggle/working/\"\narchivo_destino = \"/kaggle/working/save.zip\"\n\ncomprimir_carpeta(carpeta_origen, archivo_destino)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T07:16:54.435846Z","iopub.execute_input":"2024-07-08T07:16:54.436193Z","iopub.status.idle":"2024-07-08T07:17:33.045487Z","shell.execute_reply.started":"2024-07-08T07:16:54.436158Z","shell.execute_reply":"2024-07-08T07:17:33.044598Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Compresión completada. Archivo ZIP creado en: /kaggle/working/save.zip\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#! pip uninstall wandb","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Eliminar todo","metadata":{}},{"cell_type":"code","source":"#!find /kaggle/working/ -mindepth 1 -type f -exec rm {} +\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport shutil\n\ndef eliminar_contenido_carpeta(ruta_carpeta):\n    # Eliminar todos los archivos dentro de la carpeta\n    for nombre_archivo in os.listdir(ruta_carpeta):\n        ruta_completa = os.path.join(ruta_carpeta, nombre_archivo)\n        try:\n            if os.path.isfile(ruta_completa) or os.path.islink(ruta_completa):\n                os.unlink(ruta_completa)\n            elif os.path.isdir(ruta_completa):\n                shutil.rmtree(ruta_completa)\n        except Exception as e:\n            print(f\"No se pudo eliminar {ruta_completa}. Error: {str(e)}\")\n\n# Ejemplo de uso\n#ruta_carpeta = '/kaggle/working/'\n#eliminar_contenido_carpeta(ruta_carpeta)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}